<?php

    /**
     *
     * Mock version of the PDOStatement class.
     *
     */
    class DummyPDOStatement extends PDOStatement
    {
        private $current_row = 0;
        /**
         * Return some dummy data
         */
        public function fetch($fetch=PDO::FETCH_BOTH, $orientation=PDO::FETCH_ORI_NEXT, $offset=0)
        {
            if ($this->current_row == 5) {
                return false;
            } else {
                $this->current_row++;
                return array('name' => 'Fred', 'age' => 10, 'id' => '1');
            }
        }
    }

    /**
     *
     * Mock database class implementing a subset
     * of the PDO API.
     *
     */
    class DummyPDO extends PDO
    {

        /**
         * Return a dummy PDO statement
         */
        public function prepare($statement, $driver_options=array())
        {
            $this->lastQuery = new DummyPDOStatement($statement);
            return $this->lastQuery;
        }
    }

    /**
     *
     * Class to provide simple testing functionality
     *
     */
    class Tester
    {
        private static $passed = array();
        private static $failed = array();
        private static $db;

        private static $term_colours = array(
            'BLACK' => "30",
            'RED' => "31",
            'GREEN' => "32",
            'DEFAULT' => "00",
        );

        /**
         * Format a line for printing. Detects
         * if the script is being run from the command
         * line or from a browser.
         *
         * Colouring code loosely based on
         * http://www.zend.com//code/codex.php?ozid=1112&single=1
         */
        private static function format_line($line, $colour='DEFAULT')
        {
            if (isset($_SERVER['HTTP_USER_AGENT'])) {
                $colour = strtolower($colour);
                return "<p style=\"color: $colour;\">$line</p>\n";
            } else {
                $colour = self::$term_colours[$colour];
                return chr(27) . "[0;{$colour}m{$line}" . chr(27) . "[00m\n";
            }
        }

        /**
         * Report a passed test
         */
        private static function report_pass($testName)
        {
            echo self::format_line("PASS: $testName", 'GREEN');
            self::$passed[] = $testName;
        }

        /**
         * Report a failed test
         */
        private static function report_failure($testName, $expected, $actual)
        {
            echo self::format_line("FAIL: $testName", 'RED');
            echo self::format_line("Expected: $expected", 'RED');
            echo self::format_line("Actual: $actual", 'RED');
            self::$failed[] = $testName;
        }

        /**
         * Print a summary of passed and failed test counts
         */
        public static function report()
        {
            $passed_count = count(self::$passed);
            $failed_count = count(self::$failed);
            echo self::format_line('');
            echo self::format_line("$passed_count tests passed. $failed_count tests failed.");

            if ($failed_count != 0) {
                echo self::format_line("Failed tests: " . join(", ", self::$failed));
            }
        }

        /**
         * Check the provided string is equal to the last
         * query generated by the dummy database class.
         */
        public static function check_equal($testName, $query)
        {
            $lastQuery = ORM::get_lastQuery();
            if ($query === $lastQuery) {
                self::report_pass($testName);
            } else {
                self::report_failure($testName, $query, $lastQuery);
            }
        }
    }
